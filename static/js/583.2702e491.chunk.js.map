{"version":3,"file":"static/js/583.2702e491.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/Contact/contact.module.css?cc97","components/Contact/contact.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/СontactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/filter.module.css?e01c","components/Filter/filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactEditor/contactEditor.module.css?484a","components/ContactEditor/ContactEditor.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Loader/loader.module.css?1600","components/Loader/Loader.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter], (contacts, filter) => {\n        return contacts.filter((contact) => contact.name.toLowerCase().includes(filter.toLowerCase().trim()));\n});","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"contact_contact__sM9EU\",\"contact_div\":\"contact_contact_div__NVwXG\",\"contact_p_name\":\"contact_contact_p_name__Si10W\",\"contact_a_phone\":\"contact_contact_a_phone__aEsRS\",\"delete_btn\":\"contact_delete_btn__Hi8aW\"};","import { useDispatch } from \"react-redux\";\nimport { deleteContact} from \"redux/contacts/operations\";\nimport css from './contact.module.css';\nimport { toast } from 'react-hot-toast';\nimport PropTypes from 'prop-types';\n\n//==============================================================================================================================\nexport const Contact = ({contact}) => {\n\n    const {id, name, number} = contact; \n    const dispatch = useDispatch();\n    const handleDelete = () => {\n        dispatch(deleteContact(id));\n        toast.success(`contact ${name} was deleted from the contact list.`);\n    }\n\n    return (\n        <li className={css.contact}> \n            <div className={css.contact_div}>\n                <p className={css.contact_p_name}>{name}</p>\n                <p className={css.contact_p}>:</p>\n                <a className={css.contact_a_phone} href={\"tel:\" + number}>{number}</a>\n                <button className={css.delete_btn} name={name} onClick={handleDelete}>x</button>\n            </div>  \n        </li>\n    )\n}\n//==============================================================================================================================\nContact.propTypes = {\n    name : PropTypes.string,\n    number: PropTypes.string,\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts_div\":\"ContactList_contacts_div__0wBAS\",\"contact_list_div\":\"ContactList_contact_list_div__LVqt9\",\"contact_list\":\"ContactList_contact_list__tnyRS\"};","import { useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"../../redux/contacts/selectors\";\nimport { Contact } from '../Contact/contact';\nimport css from './ContactList.module.css';\n\nexport const ContactList = () => {\n\n    const visibleContacts = useSelector(selectVisibleContacts);\n   \n    return  <div className={css.contacts_div}>\n                <h2>Contacts</h2>\n                <div className={css.contact_list_div}>\n                    <ul className={css.contact_list}> \n                        {visibleContacts.map(contact => <Contact contact={contact} key={contact.id}/>)} \n                    </ul>\n                </div>\n            </div>\n                \n            \n}","// extracted by mini-css-extract-plugin\nexport default {\"filter_div\":\"filter_filter_div__MU14r\",\"filter_label\":\"filter_filter_label__fXA62\",\"filter_input\":\"filter_filter_input__sJN9Q\",\"icon\":\"filter_icon__NtqKZ\"};","import css from './filter.module.css';\nimport { useDispatch } from \"react-redux\";\nimport { setFilter } from \"redux/contacts/filterSlice\";\nimport {ImSearch} from 'react-icons/im';\n\n//==============================================================================================================================\nexport const Filter = () => {\n\n    const dispatch = useDispatch();\n       \n    const handleFilterChange = (filter) => dispatch(setFilter(filter));\n\n    return  (\n        <div className={css.filter_div}>\n            <form className={css.filter_form}>\n                <label className={css.filter_label}>Filter\n                    \n                    <input className={css.filter_input}\n                        type=\"text\"\n                        name=\"filter\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                        onChange={(e) => handleFilterChange(e.target.value)}\n                    />\n                    <ImSearch className={css.icon}/>\n                </label>    \n            </form>\n            \n        </div>\n    )\n}\n//==============================================================================================================================","// extracted by mini-css-extract-plugin\nexport default {\"sideBar\":\"contactEditor_sideBar__BivKG\",\"contactEditor_form\":\"contactEditor_contactEditor_form__zIzr1\",\"input_name\":\"contactEditor_input_name__P3Sn2\",\"input_number\":\"contactEditor_input_number__lko2H\",\"submit_btn\":\"contactEditor_submit_btn__Z05QO\"};","import { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { addContact } from \"redux/contacts/operations\";\nimport {Filter} from '../Filter/filter';\n\nimport { toast } from 'react-hot-toast';\nimport css from './contactEditor.module.css';\n\n// компонент - форма для додавання нового контакту =============================================================\nexport const ContactEditor = () => {\n\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const onFormSubmit = e => {\n\n        e.preventDefault();\n        const form = e.currentTarget;\n        const name = form.elements.name.value.trim();\n        const number = form.elements.number.value;\n\n        if (!name) {\n            toast.error(\"Empty name! Please fill the form fields befor adding contact to the phonebook!\");\n        } else if (contacts.some(contact => contact.name === name)) {\n            toast.error(`${name} is already in contacts.`);\n        } else{\n            dispatch(addContact({name, number}));\n            toast.success(`${name} was added to the contact list.`);\n        }\n        form.reset();\n    }\n\n    return (\n        <aside className={css.sideBar}>\n\n            <div className={css.contactEditor_form_div}>\n                <form className={css.contactEditor_form} onSubmit={onFormSubmit}>\n\n                    <label className={css.label_name}>Name\n                        <input className={css.input_name}\n                            type=\"text\"\n                            name=\"name\"\n                            pattern=\"^[А-Яа-яЁёїЇ'A-Za-z\\s]+$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                            maxLength=\"25\"\n                            required\n                            placeholder='Name Surname'\n                        />\n                    </label>\n\n                    <label className={css.label_number}>Number\n                        <input className={css.input_number}\n                            type=\"tel\"\n                            name=\"number\"\n                            pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{2}-[0-9]{2}|[0-9]{3} [0-9]{3} [0-9]{2} [0-9]{2}\"\n                            title=\"Phone number must be in format [xxx-xxx-xx-xx] or [xxx xxx xx xx]\"\n                            required\n                            placeholder='xxx-xxx-xx-xx'\n                        />\n                    </label>\n                    \n                    <button type=\"submit\" className={css.submit_btn}>Add contact</button>\n                </form>\n            </div>\n            \n            <Filter />\n            \n        </aside>\n    )\n}\n//==============================================================================================================","// extracted by mini-css-extract-plugin\nexport default {\"loaderOverlay\":\"loader_loaderOverlay__kEIB1\"};","import { Oval } from 'react-loader-spinner';\nimport css from './loader.module.css';\n\n//=======================================================================================================================\n\nexport const Loader = () => { \n    return <div className={css.loaderOverlay}>\n            <Oval   className='loader' \n                    height={80}\n                    width={80}\n                    color=\"#4fa94d\"\n                    wrapperStyle={{}}\n                    wrapperClass=\"\"\n                    visible={true}\n                    ariaLabel='oval-loading'\n                    secondaryColor=\"#4fa94d\"\n                    strokeWidth={2}\n                    strokeWidthSecondary={2}\n            />\n           </div>\n} \n\n//=======================================================================================================================\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport { ContactList } from 'components/ContactList/СontactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport {Loader} from '../components/Loader/Loader';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\n\n// сторінка телефонної книги контактів ====================================================================================\n\nexport default function Contacts() {\n  \n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n  \n    useEffect(() => { dispatch(fetchContacts()); }, [dispatch]);  // робимо запит на backend для отримання списку контактів при кожній зміні store\n  \n    return (\n        <section className='contacts_section'>\n\n          <Helmet><title>Your contact book</title></Helmet>\n          <ContactEditor/>\n          {isLoading && <Loader/>}\n\n          <ContactList />\n\n        </section>\n    );\n  }\n\n//=========================================================================================================================="],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","trim","Contact","id","number","dispatch","useDispatch","className","css","href","onClick","deleteContact","toast","ContactList","visibleContacts","useSelector","map","Filter","type","pattern","title","required","onChange","e","target","value","setFilter","ContactEditor","onSubmit","preventDefault","form","currentTarget","elements","some","addContact","reset","maxLength","placeholder","Loader","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}