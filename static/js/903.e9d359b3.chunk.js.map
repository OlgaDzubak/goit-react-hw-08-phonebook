{"version":3,"file":"static/js/903.e9d359b3.chunk.js","mappings":"+MACA,EAAiC,iCAAjC,EAAmF,iCAAnF,EAA6H,yB,SCIhHA,EAAW,SAACC,GAErB,OAAwCC,EAAAA,EAAAA,UAAS,YAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAWA,OACI,+BACI,mBAAOC,UAAWC,EAAlB,UAAsC,YAElC,kBAAOD,UAAWC,EACdC,KAAMJ,EACNK,KAAK,WACLC,QAAWR,EAAKQ,QAChBC,UAAU,KACVC,UAAU,IACVC,UAAQ,EACRC,MAAO,oGACPC,YAAY,WACZC,aAAa,SAIjB,mBAAQV,UAAWC,EACXC,KAAK,SACLS,QA5BE,WAMlBZ,EALkB,aAAfD,EAKa,WAHC,OAIpB,EAmBW,SAG2B,aAAjBA,GACI,cAAGE,UAAU,eAAb,UAA4B,SAAC,MAAD,OAC5B,cAAGA,UAAU,cAAb,UAA2B,SAAC,MAAD,YAOxD,C,gHC9CD,GAAgB,cAAgB,iCAAiC,UAAY,6BAA6B,YAAc,+BAA+B,UAAY,8B,SCOlJY,EAAY,WAErB,IAAMC,GAAWC,EAAAA,EAAAA,MAejB,OACI,gBAAKd,UAAWC,EAAAA,cAAhB,UACI,kBAAMD,UAAWC,EAAAA,UAAec,SAfnB,SAACC,GAElBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cAEnBN,GAASO,EAAAA,EAAAA,IAAM,CACC,MAASF,EAAKG,SAASC,MAAMC,MAC7B,SAAYL,EAAKG,SAASG,SAASD,SAGnDL,EAAKO,OACR,EAI+Df,aAAa,MAArE,WAEI,mBAAOV,UAAWC,EAAAA,YAAlB,UAAmC,SAE/B,kBAAOD,UAAWC,EAAAA,YACdC,KAAK,QACLC,KAAK,QACLI,UAAQ,EACRE,YAAY,yBAIpB,SAACd,EAAA,EAAD,KAEA,mBAAQO,KAAK,SAASF,UAAWC,EAAAA,UAAjC,SAAgD,eAK/D,ECxCU,SAASyB,IAEpB,OACI,gCACE,SAACC,EAAA,EAAD,WAAQ,2BAAO,aACf,SAACf,EAAD,MAGT,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Password/password.module.css?f87e","components/Password/Password.jsx","webpack://goit-react-hw-08-phonebook/./src/components/LoginForm/loginForm.module.css?9d59","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"label_password\":\"password_label_password__VjaaN\",\"input_password\":\"password_input_password__7N6tv\",\"eyeBtn\":\"password_eyeBtn__p64yj\"};","import { useState } from \"react\";   \nimport {AiOutlineEye, AiOutlineEyeInvisible} from 'react-icons/ai'; \nimport css from './password.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Password = (prop) => {\n\n    const [passwordType, setPasswordType] = useState(\"password\");\n\n    const togglePassword =()=>{\n        if(passwordType===\"password\")\n        {\n         setPasswordType(\"text\")\n         return;\n        }\n        setPasswordType(\"password\")\n    }\n\n    return (\n        <>\n            <label className={css.label_password}>\n                Password\n                <input className={css.input_password}\n                    type={passwordType} \n                    name=\"password\" \n                    pattern = {prop.pattern}\n                    maxLength='15'\n                    minLength='8'\n                    required\n                    title= \"Password must contain minimum 8 maximum 15 symbols, at least one letter and, at least one number.\"\n                    placeholder='password' \n                    autoComplete=\"off\"\n                      \n                />\n            \n                <button className={css.eyeBtn} \n                        type=\"button\"\n                        onClick={togglePassword}>\n                        { passwordType === \"password\" \n                            ? <i className=\"css.eyeClose\"><AiOutlineEyeInvisible/></i> \n                            : <i className=\"css.eyeOpen\"><AiOutlineEye/></i> \n                        }\n                </button>\n            </label>    \n            \n        </>\n    )\n}\n\nPassword.propTypes = {\n    pattern : PropTypes.string,\n};","// extracted by mini-css-extract-plugin\nexport default {\"loginForm_div\":\"loginForm_loginForm_div__v8Vpv\",\"loginForm\":\"loginForm_loginForm__Hat7F\",\"input_email\":\"loginForm_input_email__RBfr3\",\"submitBtn\":\"loginForm_submitBtn__iKxHy\"};","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { Password } from 'components/Password/Password';\nimport css from './loginForm.module.css';\n\n\n// компонент - форма для авторизації юзера ===================================================\n\n    export const LoginForm = () => {\n\n        const dispatch = useDispatch();\n\n        const handleSubmit = (event) => {\n            \n            event.preventDefault();\n            const form = event.currentTarget;\n\n            dispatch(logIn({\n                            \"email\": form.elements.email.value,\n                            \"password\": form.elements.password.value\n                           })\n                    );\n            form.reset();\n        };\n\n        return (\n            <div className={css.loginForm_div}>\n                <form className={css.loginForm} onSubmit={handleSubmit} autoComplete=\"off\">\n\n                    <label className={css.label_email}>\n                        Email\n                        <input className={css.input_email}\n                            type=\"email\" \n                            name=\"email\" \n                            required\n                            placeholder='example@mail.com'\n                        />\n                    </label>\n\n                    <Password/>\n\n                    <button type=\"submit\" className={css.submitBtn}>Log In</button>\n\n                </form>\n            </div>\n        );\n    };\n\n//===========================================================================================","import { Helmet } from \"react-helmet\";\nimport { LoginForm } from \"components/LoginForm/LoginForm\";\n\n\n// сторінка авторизації юзера =============================================================================================\n\nexport default function Login() {\n\n    return (\n        <section>\n          <Helmet><title>Login</title></Helmet>\n          <LoginForm />\n        </section>\n      );\n}\n\n//=========================================================================================================================="],"names":["Password","prop","useState","passwordType","setPasswordType","className","css","type","name","pattern","maxLength","minLength","required","title","placeholder","autoComplete","onClick","LoginForm","dispatch","useDispatch","onSubmit","event","preventDefault","form","currentTarget","logIn","elements","email","value","password","reset","Login","Helmet"],"sourceRoot":""}